#!/usr/bin/env python3

# Crafting the Python wrapper based on the described requirements and the inspected bash script structure.

import argparse
import os
import yaml
import sys
from pathlib import Path

from src.wrapper_utils import (
    create_config, run_step, run_step_help,sqanti_path,check_conda
)
from src.logging_config import sqanti_art, main_logger
script_dir = os.path.dirname(os.path.abspath(__file__))


def main():
    check_conda()
    main_logger.info(sqanti_art()) # Print the ASCII art  

    parser = argparse.ArgumentParser(description="Python wrapper for SQANTI3 pipeline.",
                                     add_help=False)
    parser.add_argument("command", choices=["all", "qc", "filter", "rescue", "init"],
                        help="Action to perform",nargs="?")
    parser.add_argument("-c","--config", type=str, default="sqanti3_config.yaml",
                        help="Path to the configuration file (default:  %(default)s ).")
    parser.add_argument("--dry-run", action="store_true",
                        help="Print the commands that would be executed")
    parser.add_argument("-a","--arguments", type=str, nargs="+",
                        help="Non-default arguments to pass to the SQANTI3 modules.")
    parser.add_argument("-h","--help", action="store_true",
                        help="Show the help message and exit.")
    parser.add_argument("-l","--log_level", default="INFO",choices=["ERROR","WARNING","INFO","DEBUG"],
                        help="Set the logging level %(default)s")

    args = parser.parse_args()
    main_logger.setLevel(args.log_level)
    if not args.command:
        if args.help:
            parser.print_help()
            sys.exit(0)
        else:
            parser.error("Please, use a command or the help message.")

    if args.help:
        if args.command == "init":
            parser.print_help()
            sys.exit(0)
        elif args.command == "all":
            parser.print_help()
            sys.exit(0)
        else:
            run_step_help(args.command)
            sys.exit(0)
            
    if not args.config.endswith(".yaml"):
        main_logger.error("Configuration file must be a YAML file.")
        sys.exit(1)
    else:
        config_path = Path(args.config)

    if args.command == "init":
        create_config(config_path, args.arguments,args.log_level)
        return

    if not config_path.exists():
        main_logger.error(f"Configuration file {config_path} not found. Please run 'init' first.")
        sys.exit(1)

    with open(config_path) as f:
        config = yaml.safe_load(f)
        if args.log_level != "INFO":
            config['main']['log_level'] = args.log_level
    # I want the user to be able to dinamically select which module they want to run. 
    if args.command == "all":
        for step in ["qc", "filter", "rescue"]:
            if config.get(step, {}).get("enabled", False): # Runs only the enabled modules in the configuration
                run_step(step, config,args.dry_run, args.arguments)
    else:
        if config.get(args.command, {}).get("enabled", False): # I want to check if the module is enabled in the configuration file.
            run_step(args.command, config,args.dry_run, args.arguments)
        else:
            main_logger.warning(f"{args.command.upper()} is disabled in the configuration file. \n Do you want to run it still? (y/n)")
            response = input().lower()
            if response == "y":
                run_step(args.command, config,args.dry_run, args.arguments)
            else:
                main_logger.info(f"Not running {args.command.upper()} as per user request.")
    try:
        os.remove(sqanti_path("none"))
    except FileNotFoundError:
        pass
if __name__ == "__main__":
    main()
