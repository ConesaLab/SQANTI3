#!/usr/bin/env python3

# Crafting the Python wrapper based on the described requirements and the inspected bash script structure.

import argparse
import os
import yaml
import sys
from pathlib import Path

from src.commands import run_command 
from src.wrapper_utils import (
    create_config, format_options, 
    sqanti_path, run_sqanti_module
)

script_dir = os.path.dirname(os.path.abspath(__file__))


def main():
    parser = argparse.ArgumentParser(description="Python wrapper for SQANTI3 pipeline.")
    parser.add_argument("command", choices=["all", "qc", "filter", "rescue", "init"],
                        help="Action to perform: 'all', 'qc', 'filter', 'rescue', or 'init'.")
    parser.add_argument("-c","--config", type=str, default="sqanti3_config.yaml",
                        help="Path to the configuration file (default: sqanti3_config.yaml).")

    args = parser.parse_args()

    config_path = Path(args.config)

    if args.command == "init":
        create_config(config_path)
        return

    if not config_path.exists():
        print(f"Configuration file {config_path} not found. Please run 'init' first.", file=sys.stderr)
        sys.exit(1)

    with open(config_path) as f:
        config = yaml.safe_load(f)

    commands = {
        "qc": f"{sys.executable} {sqanti_path('sqanti3_qc.py')} {{options}}",
        "filter": f"{sys.executable} {sqanti_path('sqanti3_filter.py')} {{type}} {{options}}",
        "rescue": f"{sys.executable} {sqanti_path('sqanti3_rescue.py')} {{type}} {{options}}"
    }
    main_opt = config.get("main", {})
    # I want the user to be able to dinamically select which module they want to run. 
    if args.command == "all":
        for step in ["qc", "filter", "rescue"]:
            if config.get(step, {}).get("enabled", False):
                options = main_opt | config[step].get("options", "")
                cmd = commands[step].format(options = format_options(options))
                print(f"Running {step.upper()}...")
                run_command(cmd, f"Running {step.upper()}...")
    else:
        if config.get(args.command, {}).get("enabled", False):
            options = main_opt | config[args.command].get("options", "")
            cmd = commands[args.command].format(options = format_options(options))
            print(f"Running {args.command.upper()}...")
            run_sqanti_module(cmd)
        else:
            print(f"{args.command.upper()} is disabled in the configuration file.", file=sys.stderr)

if __name__ == "__main__":
    main()
