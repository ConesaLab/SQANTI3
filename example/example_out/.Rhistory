}else{
return("NULL")
}})
iso_per_knownTr_polya$total_bin=apply(iso_per_knownTr_polya,1, function(X){
if(as.numeric(X["total_iso"])<8){
return(as.character(X["total_iso"]))
}else{
return("8+")
}})
iso_per_knownTr_polya$FSM_cat=factor(iso_per_knownTr_polya$FSM_cat, levels=c("Unique", "Multiple"))
iso_per_knownTr_polya$ISM_cat=factor(iso_per_knownTr_polya$ISM_cat, levels=c("Unique", "Multiple"))
iso_per_knownTr_polya$total_cat=factor(iso_per_knownTr_polya$total_cat, levels=c("Unique", "Multiple"))
max_y=max(table(iso_per_knownTr_polya[which(iso_per_knownTr_polya$FSM_cat!="NULL"),"FSM_cat"]))+10
new.3.FSM <- ggplot(iso_per_knownTr_polya[which(iso_per_knownTr_polya$FSM_cat!="NULL"),])+
geom_bar(aes(x=FSM_cat, fill=FSM_bin), color = "black", width = 0.5) +
mytheme+
geom_text(aes(x = FSM_cat, label = stat(count)), stat = "count", vjust = -0.5) +
scale_y_continuous(breaks = pretty_breaks(6), limits = c(0,max_y)) +
scale_fill_brewer("Total FSM \nper reference ID", palette = "Blues") +
labs(x="FSM per reference transcript",
y="Count of reference transcripts",
title="Reference Transcript Redundancy",
subtitle="Only FSM with a polyA motif found")
max_y=max(table(iso_per_knownTr_polya[which(iso_per_knownTr_polya$ISM_cat!="NULL"),"ISM_cat"]))+10
new.3.ISM <- ggplot(iso_per_knownTr_polya[which(iso_per_knownTr_polya$ISM_cat!="NULL"),])+
geom_bar(aes(x=ISM_cat, fill=ISM_bin), color = "black", width = 0.5) +
mytheme+
geom_text(aes(x = ISM_cat, label = stat(count)), stat = "count", vjust = -0.5) +
scale_y_continuous(breaks = pretty_breaks(6), limits = c(0,max_y)) +
scale_fill_brewer("Total ISM \nper reference ID", palette = "Oranges") +
labs(x="ISM per reference transcript",
y="Count of reference transcripts",
title="Reference Transcript Redundancy",
subtitle="Only ISM with a polyA motif found")
max_y=max(table(iso_per_knownTr_polya[which(iso_per_knownTr_polya$total_cat!="NULL"),"total_cat"]))+10
new.3.total <- ggplot(iso_per_knownTr_polya[which(iso_per_knownTr_polya$total_cat!="NULL"),])+
geom_bar(aes(x=total_cat, fill=total_bin), color = "black", width = 0.5) +
mytheme+
geom_text(aes(x = total_cat, label = stat(count)), stat = "count", vjust = -0.5) +
scale_y_continuous(breaks = pretty_breaks(6), limits = c(0,max_y)) +
scale_fill_brewer("Total FSM+ISM \nper reference", palette = "Greens") +
labs(x="FSM+ISM per reference transcript",
y="Count of reference transcripts",
title="Reference Transcript Redundancy",
subtitle="FSM+ISM with a polyA motif found")
#new.3.p<-ggplot(iso_per_knownTr_polya, aes(x=total_iso, fill=factor(perc_FSM_range))) +
#  geom_histogram(binwidth = 1, col="white") +
#  scale_x_continuous(breaks = seq(0,max_num_iso_polya,1)) +
#  scale_fill_manual(values = myPalette, guide='none', name="Percentage of FSM isoforms") +
#  mytheme+theme(axis.title.x=element_text()) +
#  theme(legend.justification=c(1,1), legend.position=c(1,1))  +
#  guides(fill = guide_legend(keywidth = 0.9, keyheight = 0.9)) +
#  labs(x="Number of FSM+ISM isoforms \n associated to the same ref. transcript",
#       y="Counts", title="Accumulation of FSM and ISM Isoforms \n\n Associated to the Same Reference Transcript.",
#       subtitle="ONLY polyA motif and CAGE + isoforms")
}
#### Now with just isoforms polyA and Cage +
if (!all(is.na(data.class$polyA_motif)) && !all(is.na(data.class$dist_to_cage_peak))) {
ism_per_transcript_cage_polya=data.ISM[which(!is.na(data.ISM$polyA_motif) & data.ISM$within_cage_peak == "True"),] %>% group_by(associated_transcript, structural_category) %>% dplyr::summarize(dplyr::n())
names(ism_per_transcript_cage_polya)[3]<-"ISM_per_tr"
fsm_per_transcript_cage_polya=data.FSM[which(!is.na(data.FSM$polyA_motif) & data.FSM$within_cage_peak == "True" ),] %>% group_by(associated_transcript, structural_category) %>% dplyr::summarize(dplyr::n())
names(fsm_per_transcript_cage_polya)[3]<-"FSM_per_tr"
iso_per_knownTr_cage_polya=merge(x = fsm_per_transcript_cage_polya , y=ism_per_transcript_cage_polya, by = "associated_transcript", all=T)
iso_per_knownTr_cage_polya$ISM_per_tr[is.na(iso_per_knownTr_cage_polya$ISM_per_tr)] <- 0
iso_per_knownTr_cage_polya$FSM_per_tr[is.na(iso_per_knownTr_cage_polya$FSM_per_tr)] <- 0
iso_per_knownTr_cage_polya$total_iso=apply(iso_per_knownTr_cage_polya, 1 , function(X) as.integer(X[3]) + as.integer(X[5]) )
#iso_per_knownTr_cage_polya$perc_FSM=apply(iso_per_knownTr_cage_polya, 1 , function(X) (as.numeric(X[3]) / as.numeric(X[6]) ) )
#iso_per_knownTr_cage_polya$perc_FSM[is.na(iso_per_knownTr_cage_polya$perc_FSM)] <- 0
#iso_per_knownTr_cage_polya$perc_FSM_range=cut(iso_per_knownTr_cage_polya$perc_FSM, breaks = c(-0.1,0.2,0.4,0.6,0.8,1),
#                                              labels = c("FSM<=20% ", "20%<FSM<=40%", "40%<FSM<=60%", "60%<FSM<=80%","FSM>80%"))
#max_num_iso_cage_polya=max(iso_per_knownTr_cage_polya$total_iso)
iso_per_knownTr_cage_polya$FSM_cat=NA
iso_per_knownTr_cage_polya$FSM_cat=apply(iso_per_knownTr_cage_polya,1, function(X){
if(as.numeric(X["FSM_per_tr"])==1){
return("Unique")
}else if(as.numeric(X["FSM_per_tr"])>1){
return("Multiple")
}else{
return("NULL")
}})
iso_per_knownTr_cage_polya$FSM_bin=apply(iso_per_knownTr_cage_polya,1, function(X){
if(as.numeric(X["FSM_per_tr"])<8){
return(as.character(X["FSM_per_tr"]))
}else{
return("8+")
}})
iso_per_knownTr_cage_polya$ISM_cat=NA
iso_per_knownTr_cage_polya$ISM_cat=apply(iso_per_knownTr_cage_polya,1, function(X){
if(as.numeric(X["ISM_per_tr"])==1){
return("Unique")
}else if(as.numeric(X["ISM_per_tr"])>1){
return("Multiple")
}else{
return("NULL")
}})
iso_per_knownTr_cage_polya$ISM_bin=apply(iso_per_knownTr_cage_polya,1, function(X){
if(as.numeric(X["ISM_per_tr"])<8){
return(as.character(X["ISM_per_tr"]))
}else{
return("8+")
}})
iso_per_knownTr_cage_polya$total_cat=NA
iso_per_knownTr_cage_polya$total_cat=apply(iso_per_knownTr_cage_polya,1, function(X){
if(as.numeric(X["total_iso"])==1){
return("Unique")
}else if(as.numeric(X["total_iso"])>1){
return("Multiple")
}else{
return("NULL")
}})
iso_per_knownTr_cage_polya$total_bin=apply(iso_per_knownTr_cage_polya,1, function(X){
if(as.numeric(X["total_iso"])<8){
return(as.character(X["total_iso"]))
}else{
return("8+")
}})
iso_per_knownTr_cage_polya$FSM_cat=factor(iso_per_knownTr_cage_polya$FSM_cat, levels=c("Unique", "Multiple"))
iso_per_knownTr_cage_polya$ISM_cat=factor(iso_per_knownTr_cage_polya$ISM_cat, levels=c("Unique", "Multiple"))
iso_per_knownTr_cage_polya$total_cat=factor(iso_per_knownTr_cage_polya$total_cat, levels=c("Unique", "Multiple"))
max_y=max(table(iso_per_knownTr_cage_polya[which(iso_per_knownTr_cage_polya$FSM_cat!="NULL"),"FSM_cat"]))+10
new.4.FSM <- ggplot(iso_per_knownTr_cage_polya[which(iso_per_knownTr_cage_polya$FSM_cat!="NULL"),])+
geom_bar(aes(x=FSM_cat, fill=FSM_bin), color = "black", width = 0.5) +
mytheme+
geom_text(aes(x = FSM_cat, label = stat(count)), stat = "count", vjust = -0.5) +
scale_y_continuous(breaks = pretty_breaks(6), limits = c(0,max_y)) +
scale_fill_brewer("Total FSM \nper reference ID", palette = "Blues") +
labs(x="FSM per reference transcript",
y="Count of reference transcripts",
title="Reference Transcript Redundancy",
subtitle="Only FSM with CAGE support and polyA motif")
max_y=max(table(iso_per_knownTr_cage_polya[which(iso_per_knownTr_cage_polya$ISM_cat!="NULL"),"ISM_cat"]))+10
new.4.ISM <- ggplot(iso_per_knownTr_cage_polya[which(iso_per_knownTr_cage_polya$ISM_cat!="NULL"),])+
geom_bar(aes(x=ISM_cat, fill=ISM_bin), color = "black", width = 0.5) +
mytheme+
geom_text(aes(x = ISM_cat, label = stat(count)), stat = "count", vjust = -0.5) +
scale_y_continuous(breaks = pretty_breaks(6), limits = c(0,max_y)) +
scale_fill_brewer("Total ISM \nper reference ID", palette = "Oranges") +
labs(x="ISM per reference transcript",
y="Count of reference transcripts",
title="Reference Transcript Redundancy",
subtitle="Only ISM with CAGE support and polyA motif")
max_y=max(table(iso_per_knownTr_cage_polya[which(iso_per_knownTr_cage_polya$total_cat!="NULL"),"total_cat"]))+10
new.4.total <- ggplot(iso_per_knownTr_cage_polya[which(iso_per_knownTr_cage_polya$total_cat!="NULL"),])+
geom_bar(aes(x=total_cat, fill=total_bin), color = "black", width = 0.5) +
mytheme+
geom_text(aes(x = total_cat, label = stat(count)), stat = "count", vjust = -0.5) +
scale_y_continuous(breaks = pretty_breaks(6), limits = c(0,max_y)) +
scale_fill_brewer("Total FSM+ISM \nper reference", palette = "Greens") +
labs(x="FSM+ISM per reference transcript",
y="Count of reference transcripts",
title="Reference Transcript Redundancy",
subtitle="FSM+ISM with CAGE support and polyA motif")
#new.4.p<-ggplot(iso_per_knownTr_cage_polya, aes(x=total_iso, fill=factor(perc_FSM_range))) +
#  geom_histogram(binwidth = 1, col="white") +
#  scale_x_continuous(breaks = seq(0,max_num_iso_cage_polya,1)) +
#  scale_fill_manual(values = myPalette, guide='none', name="Percentage of FSM isoforms") +
#  mytheme+theme(axis.title.x=element_text()) +
#  theme(legend.justification=c(1,1), legend.position=c(1,1))  +
#  guides(fill = guide_legend(keywidth = 0.9, keyheight = 0.9)) +
#  labs(x="Number of FSM+ISM isoforms \n associated to the same Ref. transcript",
#       y="Counts", title="Accumulation of FSM and ISM Isoforms \n\n Associated to the Same Reference Transcript.",
#       subtitle="ONLY polyA motif and CAGE + isoforms")
}
}
#### Rarefraction plots
if (saturation.curves=='True'){
if (!all(is.na(data.class$FL))) {
FL.counts <- as.matrix(data.class$FL)
rownames(FL.counts) <- data.class$isoform
colnames(FL.counts) <- "FL"
myfactors <- data.frame(sample = c("FL"))
rownames(myfactors) = colnames(FL.counts)
mybiotype=as.matrix(data.class$coding)
rownames(mybiotype)=data.class$isoform
mycategory=as.matrix(data.class$structural_category)
rownames(mycategory)=data.class$isoform
mydata = readData(data = FL.counts, factors = myfactors, biotype = mybiotype, category=mycategory)
rarefact <- LR.rarefaction(mydata , samples = 1)
rar1 <- suppressWarnings(plot.rarefaction(rarefact, sample = 1, k = 1, depth.increase = 2, break.by = "category"))
rar2 <- suppressWarnings(plot.rarefaction(rarefact, sample = 1, k = 2, depth.increase = 2, break.by = "category"))
rar3 <- suppressWarnings(plot.rarefaction(rarefact, sample = 1, k = 3, depth.increase = 2, break.by = "category"))
rar5 <- suppressWarnings(plot.rarefaction(rarefact, sample = 1, k = 5, depth.increase = 2, break.by = "category"))
}
}
# PLOT pn1.2: Splice Junction relative coverage (if coverage and expression provided)
##### NEEDS TRANSCRIPT_COORD VALUES IN JUNCTIONS FILE (???)
#if (nrow(data.junction) > 0){
#  if (!all(is.na(data.junction$total_coverage)) & !all(is.na(data.class$iso_exp))){
#   data.junction$isoExp = data.class[data.junction$isoform, "iso_exp"]
#    total = aggregate(cbind(total_coverage,isoExp,transcript_coord) ~ junctionLabel, data = data.junction,
#                      FUN = function(x) c(mn = sum(x), n = min(x) ) )
#    total$relCov = total$total_coverage[,"n"] / total$isoExp[,"mn"]
#    total$minTSS = total$transcript_coord[,"n"]
#    uniqJunc = unique(data.junction[,c("junctionLabel", "canonical_known", "total_coverage")])
#    uniqJunc$notCov = uniqJunc$total_coverage == 0
#    uniqueJunc_nonCov = as.data.frame(table(uniqJunc[uniqJunc$totalCoverage==0,"canonical_known"])/table(uniqJunc$canonical_known)*100)
#    uniqJunc2 = merge(total, uniqJunc, by=1)
#    uniqJunc2$TSSrange =cut(uniqJunc2$minTSS, breaks = c(0,40,80,120,160,200,10000000), labels = c("0-40", "41-80", "81-120", "121-160", "161-200",">200"))
# calculate total expression associated to each unique junction
#    sumExpPerJunc = tapply(data.junction$isoExp, data.junction$junctionLabel, sum)
#    data.junction$sumIsoExp = sumExpPerJunc[data.junction$junctionLabel]
#    data.junction$relCov = data.junction$total_coverage / data.junction$sumIsoExp
#    max_dist = max(data.junction$transcript_coord) +1
#    data.junction$TSSrange = cut(data.junction$transcript_coord, breaks = c(0,20,40,60,80,100,120,140,160,180,200,max_dist), labels = c("0-20", "21-40","41-80","61-80", "81-100","101-120", "121-140","141-160", "161-180", "181-200", ">200"))
#    pn1.2 <-ggplot(data=data.junction[data.junction$relCov<1,], aes(y=relCov,x=TSSrange,fill=canonical_known)) +
#      geom_boxplot(outlier.size = 0.2, size=0.3) +
#      scale_fill_manual(values = myPalette[c(1,7,3,2)], drop=FALSE) +
#      ylab("Relative coverage") +
#      xlab("# TSS distance range") +
#      mytheme_bw +
#      theme(legend.position="bottom", legend.title=element_blank())  +
#      ggtitle( "Junctions Relative Coverage\n\n\n") +
#      theme(axis.text.x = element_text(angle = 45,margin=margin(15,0,0,0), size=12))
#  }else{    uniqJunc = unique(data.junction[,c("junctionLabel", "canonical_known")])
#  }
#}
###** Output plots
pdf(file=report.file, width = 6.5, height = 6.5)
p1.s.list
print(p.polyA_dist)
df.polyA
# PLOT polyA motif ranking, distance from 3' end
df.polyA <- as.data.frame(group_by(data.class, by=structural_category) %>%
dplyr::summarise(count=dplyr::n(),
polyA_detected=sum(!is.na(polyA_motif)),
polyA_detected_perc=round(polyA_detected*100/count)))
df.polyA
table.polyA <- tableGrob(df.polyA, rows = NULL, cols = c("Category","Count","polyA\nDetected","%"))
title.polyA <- textGrob("Number of polyA Motifs Detected", gp=gpar(fontface="italic", fontsize=15), vjust=-12)
gt.polyA <- gTree(children=gList(table.polyA, title.polyA))
df.polyA_freq <- as.data.frame(sort(table(data.class$polyA_motif),decreasing=T))
df.polyA_freq$perc <- round(df.polyA_freq$Freq*100/sum(df.polyA_freq$Freq),1)
table.polyA_freq <- tableGrob(df.polyA_freq, rows = NULL, cols = c("Motif", "Count", "%"))
title.polyA_freq <- textGrob("Frequency of PolyA Motifs", gp=gpar(fontface="italic", fontsize=15), vjust=-18)
gt.polyA_freq <- gTree(children=gList(title.polyA_freq, table.polyA_freq))
grid.arrange(gt.polyA, gt.polyA_freq, ncol=2)
p.polyA_dist
df.polyA <- as.data.frame(group_by(data.class, by=structural_category) %>%
dplyr::summarise(count=dplyr::n(),
polyA_detected=sum(!is.na(polyA_motif)),
polyA_detected_perc=round(polyA_detected*100/count)))
df.polyA_freq <- as.data.frame(sort(table(data.class$polyA_motif),decreasing=T))
# Table: Number of PolyA Motifs Detected
df.polyA_MD <- df.polyA
rownames(df.polyA_MD) <- NULL
colnames(df.polyA_MD) <- c("Category","Count","polyA\nDetected","%")
# Table: Frequency of polyA motifs
df.polyA_freq_MD <- df.polyA_freq
rownames(df.polyA_freq_MD) <- NULL
colnames(df.polyA_freq_MD) <- c("Motif", "Count", "%")
df.polyA_freq_MD
# Table: Frequency of polyA motifs
df.polyA_freq_MD <- df.polyA_freq
df.polyA_freq_MD
df.polyA_freq_MD
df.polyA_freq$perc <- round(df.polyA_freq$Freq*100/sum(df.polyA_freq$Freq),1)
# Table: Frequency of polyA motifs
df.polyA_freq_MD <- df.polyA_freq
rownames(df.polyA_freq_MD) <- NULL
colnames(df.polyA_freq_MD) <- c("Motif", "Count", "%")
datatable(df.polyA_MD,
options = list(dom = 't'),
caption = htmltools::tags$caption(
style = 'caption-side: bottom; text-align: center;',
htmltools::em('Number of PolyA Motifs Detected'))
)
datatable(df.polyA_freq,
options = list(dom = 't'),
caption = htmltools::tags$caption(
style = 'caption-side: bottom; text-align: center;',
htmltools::em('Frequency of PolyA Motifs'))
)
df.polyA_subcat <- as.data.frame(group_by(data.class, by=subcategory) %>%
dplyr::summarise(count=dplyr::n(),
polyA_detected=sum(!is.na(polyA_motif)),
polyA_detected_perc=round(polyA_detected*100/count)))
data.class$polyA_motif
data.class
df.polyA_subcat <- as.data.frame(group_by(data.class, by=subcategory) %>%
dplyr::summarise(count=dplyr::n(),
polyA_detected=sum(!is.na(polyA_motif)),
polyA_detected_perc=round(polyA_detected*100/count)))
df.polyA_subcat
df.polyA_subcat <- tableGrob(df.polyA_subcat, rows = NULL, cols = c("Subcategory","Count","polyA\nDetected","%"))
title.polyA <- textGrob("Number of polyA Motifs Detected", gp=gpar(fontface="italic", fontsize=15), vjust=-18)
gt.polyA <- gTree(children=gList(df.polyA_subcat, title.polyA))
table.polyA_freq <- tableGrob(df.polyA_freq, rows = NULL, cols = c("Motif", "Count", "%"))
title.polyA_freq <- textGrob("Frequency of PolyA Motifs", gp=gpar(fontface="italic", fontsize=15), vjust=-18)
gt.polyA_freq <- gTree(children=gList(title.polyA_freq, table.polyA_freq))
exists("p.polyA_dist")
exists("p.polyA_dist_subcat")
# Table 1: Number of isoforms in each structural category
table1MD <- as.data.frame(table(data.class$structural_category))
rownames(table1MD) <- NULL
colnames(table1MD) <- c("Category","# Isoforms")
# Table 2: Number of Novel vs Known Genes
table2MD = as.data.frame(table(isoPerGene$novelGene))
rownames(table2MD) = NULL
colnames(table2MD) = c("Category","# Genes")
# Table 3: Junction Classification
freqCat <- as.data.frame(table(uniqJunc$SJ_type))
freqCat$Var1 <- gsub(" ", "", freqCat$Var1)
freqCat$Var1 <- gsub("\n", " ", freqCat$Var1)
uniq_sj_count <- nrow(uniqJunc)
freqCat$Frac <- round(freqCat$Freq*100 / uniq_sj_count, 2)
table3MD <- as.data.frame(table(uniqJunc$SJ_type))
table3MD$Var1 <- gsub(" ", "", freqCat$Var1)
table3MD$Var1 <- gsub("\n", " ", freqCat$Var1)
table3MD$Frac <- round(freqCat$Freq*100 / uniq_sj_count, 2)
colnames(table3MD) <- c("Category","# SJs","Percent")
rownames(table3MD) <- NULL
# Table: Number of PolyA Motifs Detected
if (exists("df.polyA")) {
df.polyA_MD <- df.polyA
rownames(df.polyA_MD) <- NULL
colnames(df.polyA_MD) <- c("Category","Count","polyA\nDetected","%")
}
# Table: Frequency of polyA motifs
if (exists("df.polyA_freq")) {
df.polyA_freq_MD <- df.polyA_freq
rownames(df.polyA_freq_MD) <- NULL
colnames(df.polyA_freq_MD) <- c("Motif", "Count", "%")
}
if (exists("df.polyA_subcat")) {
df.polyA_subcat_MD <- df.polyA_subcat
rownames(df.polyA_subcat_MD) <- NULL
colnames(df.polyA_subcat_MD) <- c("Category","Count","polyA\nDetected","%")
}
if (exists("df.cage")) {
df.cage_MD <- df.cage
rownames(df.cage_MD) <- NULL
colnames(df.cage_MD) <- c("Category","Count","CAGE\nDetected","%")
}
if (exists("df.cage_subc")) {
df.cage_subc_MD <- df.cage_subc
rownames(df.cage_subc_MD) <- NULL
colnames(df.cage_subc_MD) <- c("Subcategory","Count","CAGE\nDetected","%")
}
### Gene Characterization
multiple_samples <- length(FL_multisample_indices)>0
iso_expression_provided <- !all(is.na(data.class$iso_exp))
FL_expression_provided <- !all(is.na(data.class$FL))
### Structural Isoform Characterization by Splice Junctions
ISM_FSM_transcript <- nrow(data.FSMISM) > 0
gene_expression_provided<- !all(is.na(data.class$gene_exp))
NNC_provided<- nrow(data.class[data.class$structural_category=="NNC",])!=0
### Splice Junction Characterization
junction_provided <- nrow(data.junction) > 0
RTS_junction_provided <- sum(data.junction$RTS_junction=='TRUE') > 0
### Comparison with Annotated TSS and TTS
FSM_provided <- nrow(data.FSM) > 0
ISM_provided <- nrow(data.ISM) > 0
polyA_dist_provided <- sum(!is.na(data.class$polyA_dist)) > 10
### CAGE distances analysis
dist_to_cage_peak_provided<- !all(is.na(data.class$dist_to_cage_peak))
polyA_motif_provided <- !all(is.na(data.class$polyA_motif))
### Good Quality Controls
predicted_NMD_n_t <-  n_t3.SJ>0 & n_t3.RTS>0 &!all(is.na(data.class$predicted_NMD))
p1x <- levels(p1$data$structural_category) # x axis
p1x_order <- 1:length(p1x)
p1x_row <- c(paste0(p1x, ' ','coding'), (paste0(p1x, ' ','non_coding')))
p1y1 <- c() # coding
p1y2 <- c() # non_coding
p1x_df <-  as.data.frame(rep(0, length(p1x_row)))
rownames(p1x_df) <-  p1x_row
p1_summary <- as.data.frame(summary(as.factor(paste0(p1$data$structural_category, ' ', p1$data$coding))))
for (i in rownames(p1x_df)) {
if (i %in% rownames(p1_summary)) {
p1x_df$`rep(0, length(p1x_row))`[rownames(p1x_df) == i] = p1_summary$`summary(as.factor(paste0(p1$data$structural_category, " ", p1$data$coding)))`[rownames(p1_summary) == i]
}
}
index_1 = 1
index_2 = 1
for (i in p1x) {
for (j in rownames(p1x_df)) {
if (i == strsplit(j, ' ')[[1]][1]) {
if (strsplit(j, ' ')[[1]][2] == 'coding') {
p1y1[index_1] <- p1x_df[j,]
index_1 = index_1 + 1
} else {
p1y2[index_2] <- p1x_df[j,]
index_2 = index_2 + 1
}
}
}
}
p1y1_plot = p1y1/sum(p1y1+p1y2)
p1y2_plot = p1y2/sum(p1y1+p1y2)
p1y_sum = round(p1y1_plot + p1y2_plot, 4)
nGenes = nrow(isoPerGene)
nIso = nrow(data.class)
myPalette_fade <- c("#D2E6F2", "#FEDCCD", "#D6EDD6", "#F9D2CA", "#DFDFDF", "#D1ECE3", "#FFECBD", "#F8DFD7", "#C6E9ED", "#F0CAC3", "#FEE0BE")
df.polyA
df.polyA_MD <- df.polyA
rownames(df.polyA_MD) <- NULL
colnames(df.polyA_MD) <- c("Category","Count","polyA\nDetected","%")
colnames(df.polyA_MD)
library(DT)
library(plyr)
library(plotly)
knitr::opts_chunk$set(echo = TRUE, cache = FALSE, warning = FALSE)
#### Data preparation (change previous table format)
### Summary
# Table 1: Number of isoforms in each structural category
table1MD <- as.data.frame(table(data.class$structural_category))
rownames(table1MD) <- NULL
colnames(table1MD) <- c("Category","# Isoforms")
# Table 2: Number of Novel vs Known Genes
table2MD = as.data.frame(table(isoPerGene$novelGene))
rownames(table2MD) = NULL
colnames(table2MD) = c("Category","# Genes")
# Table 3: Junction Classification
freqCat <- as.data.frame(table(uniqJunc$SJ_type))
freqCat$Var1 <- gsub(" ", "", freqCat$Var1)
freqCat$Var1 <- gsub("\n", " ", freqCat$Var1)
uniq_sj_count <- nrow(uniqJunc)
freqCat$Frac <- round(freqCat$Freq*100 / uniq_sj_count, 2)
table3MD <- as.data.frame(table(uniqJunc$SJ_type))
table3MD$Var1 <- gsub(" ", "", freqCat$Var1)
table3MD$Var1 <- gsub("\n", " ", freqCat$Var1)
table3MD$Frac <- round(freqCat$Freq*100 / uniq_sj_count, 2)
colnames(table3MD) <- c("Category","# SJs","Percent")
rownames(table3MD) <- NULL
### Comparison with Annotated TSS and TTS
# Table: Number of PolyA Motifs Detected
if (exists("df.polyA")) {
df.polyA_MD <- df.polyA
rownames(df.polyA_MD) <- NULL
colnames(df.polyA_MD) <- c("Category","Count","polyA\nDetected","%")
}
# Table: Frequency of polyA motifs
if (exists("df.polyA_freq")) {
df.polyA_freq_MD <- df.polyA_freq
rownames(df.polyA_freq_MD) <- NULL
colnames(df.polyA_freq_MD) <- c("Motif", "Count", "%")
}
if (exists("df.polyA_subcat")) {
df.polyA_subcat_MD <- df.polyA_subcat
rownames(df.polyA_subcat_MD) <- NULL
colnames(df.polyA_subcat_MD) <- c("Category","Count","polyA\nDetected","%")
}
if (exists("df.cage")) {
df.cage_MD <- df.cage
rownames(df.cage_MD) <- NULL
colnames(df.cage_MD) <- c("Category","Count","CAGE\nDetected","%")
}
if (exists("df.cage_subc")) {
df.cage_subc_MD <- df.cage_subc
rownames(df.cage_subc_MD) <- NULL
colnames(df.cage_subc_MD) <- c("Subcategory","Count","CAGE\nDetected","%")
}
#### Condition check (check whether show plots or not)
### Gene Characterization
multiple_samples <- length(FL_multisample_indices)>0
iso_expression_provided <- !all(is.na(data.class$iso_exp))
FL_expression_provided <- !all(is.na(data.class$FL))
### Structural Isoform Characterization by Splice Junctions
ISM_FSM_transcript <- nrow(data.FSMISM) > 0
gene_expression_provided<- !all(is.na(data.class$gene_exp))
NNC_provided<- nrow(data.class[data.class$structural_category=="NNC",])!=0
### Splice Junction Characterization
junction_provided <- nrow(data.junction) > 0
RTS_junction_provided <- sum(data.junction$RTS_junction=='TRUE') > 0
### Comparison with Annotated TSS and TTS
FSM_provided <- nrow(data.FSM) > 0
ISM_provided <- nrow(data.ISM) > 0
polyA_dist_provided <- sum(!is.na(data.class$polyA_dist)) > 10
### CAGE distances analysis
dist_to_cage_peak_provided<- !all(is.na(data.class$dist_to_cage_peak))
polyA_motif_provided <- !all(is.na(data.class$polyA_motif))
### Good Quality Controls
predicted_NMD_n_t <-  n_t3.SJ>0 & n_t3.RTS>0 &!all(is.na(data.class$predicted_NMD))
## Figures
### P1
p1x <- levels(p1$data$structural_category) # x axis
p1x_order <- 1:length(p1x)
p1x_row <- c(paste0(p1x, ' ','coding'), (paste0(p1x, ' ','non_coding')))
p1y1 <- c() # coding
p1y2 <- c() # non_coding
p1x_df <-  as.data.frame(rep(0, length(p1x_row)))
rownames(p1x_df) <-  p1x_row
p1_summary <- as.data.frame(summary(as.factor(paste0(p1$data$structural_category, ' ', p1$data$coding))))
for (i in rownames(p1x_df)) {
if (i %in% rownames(p1_summary)) {
p1x_df$`rep(0, length(p1x_row))`[rownames(p1x_df) == i] = p1_summary$`summary(as.factor(paste0(p1$data$structural_category, " ", p1$data$coding)))`[rownames(p1_summary) == i]
}
}
index_1 = 1
index_2 = 1
for (i in p1x) {
for (j in rownames(p1x_df)) {
if (i == strsplit(j, ' ')[[1]][1]) {
if (strsplit(j, ' ')[[1]][2] == 'coding') {
p1y1[index_1] <- p1x_df[j,]
index_1 = index_1 + 1
} else {
p1y2[index_2] <- p1x_df[j,]
index_2 = index_2 + 1
}
}
}
}
p1y1_plot = p1y1/sum(p1y1+p1y2)
p1y2_plot = p1y2/sum(p1y1+p1y2)
p1y_sum = round(p1y1_plot + p1y2_plot, 4)
nGenes = nrow(isoPerGene)
nIso = nrow(data.class)
myPalette_fade <- c("#D2E6F2", "#FEDCCD", "#D6EDD6", "#F9D2CA", "#DFDFDF", "#D1ECE3", "#FFECBD", "#F8DFD7", "#C6E9ED", "#F0CAC3", "#FEE0BE")
exists("p28.Cov")
cat("#### Splice Junctions Without Short Read Coverage",'\n')
ggplotly(p28.Cov)%>%
layout(margin = list(r = 130))
